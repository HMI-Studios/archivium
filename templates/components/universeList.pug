.card-list
  each universe in universes
    .card.sheet.gap-4.align-start( onclick=`goTo('${ADDR_PREFIX}/universes/${universe.shortname}')` )
      .d-flex.flex-col.grow-1
        h3.ma-0
          a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}` ) #{universe.title}
        .d-flex.gap-1

      .d-flex.flex-col.grow-3( style='grid-column: 2 / 4;' )
          span 
            b #{T('Authors')}: 
            +authorList(universe.authors)
          .d-flex.gap-2.flex-wrap
            span
              b #{T('Created')}: 
              | #{formatDate(universe.created_at, true)}
            | — 
            span 
              b #{T('Updated')}: 
              | #{formatDate(universe.updated_at, true)}
            | —
            span #{universe.public ? 'Public' : 'Private'}
            if contextUser
              | —
              a.follow-btn.link.link-animated( data-following=universe.followers[contextUser.id] data-universe-short=universe.shortname )
                | #{universe.followers[contextUser.id] ? 'Unfollow' : 'Follow'}
  
  script.
    document.querySelectorAll('.follow-btn').forEach((followBtn) => {
      followBtn.addEventListener('click', async (e) => {
        e.stopPropagation();
        const { following, universeShort } = followBtn.dataset;
        let isFollowing = following !== 'true';
        followBtn.classList.add('disabled');
        followBtn.classList.remove('link-broken');
        try {
          await putJSON(`/api/universes/${universeShort}/follow`, { isFollowing });
        } catch (err) {
          console.error(err);
          followBtn.classList.add('link-broken');
          isFollowing = !isFollowing;
        } finally {
          followBtn.innerText = isFollowing ? 'Unfollow' : 'Follow';
          followBtn.dataset.following = isFollowing ? 'true' : 'false';
          followBtn.classList.remove('disabled');
        }
      });
    });
