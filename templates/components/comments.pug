div
  .d-flex.flex-col.gap-4
    each comment in comments
      .sheet.d-flex.gap-4.align-start
        img.userIcon( alt=commenters[comment.author_id].username, src=commenters[comment.author_id].pfpUrl )
        .d-flex.flex-col.grow-1
          div
            a.link.link-animated.mr-2( href=`/users/${commenters[comment.author_id].username}` ) 
              b #{commenters[comment.author_id].username}
            small #{formatDate(comment.created_at)}
          .comment( data-val=comment.body )

  br
  hr
  br

  if contextUser && ((universe.public && universe.discussion_open) || (universe.author_permissions[contextUser.id] >= (universe.discussion_open ? perms.READ : perms.COMMENT)))
    form( method='POST' action=commentAction )
      .editor( data-replicated-value='' )
        textarea.comment-field( id='body' name='body' oninput="t" )
        span.chars 2000
      div
        button#post( type='submit' ) Post Comment
      if error
        div
          span( style={'font-size': 'small'} ).color-error= error

  script.
    document.querySelectorAll('textarea.comment-field').forEach(el => {
      el.oninput = () => {
        el.parentNode.dataset.replicatedValue = el.value;
        el.parentNode.querySelector('.chars').innerText = 2000 - el.value.length;
        el.form.post.disabled = el.value.length > 2000;
      };
    });
      
    document.querySelectorAll('.comment').forEach((el) => {
      loadMarkdown(el, '#{universe.shortname}', el.dataset.val, null);
    });
