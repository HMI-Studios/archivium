.notes
  p.ma-0.pa-1#notes-left-btn
    a.link.link-animated Create Note

  div
    #note-control-tabs.hidden
      ul.navbarBtns.gap-2
        li.edit.navbarBtn.grow-1
          b.navbarBtnLink.navbarText.ma-0.pa-1 Edit
        li.preview.navbarBtn.grow-1
          b.navbarBtnLink.navbarText.ma-0.pa-1 Preview

  div
    #note-list.card-list
      each note in notes
        .card.sheet
          | #{JSON.stringify(note)}
    #note-edit.hidden
      textarea
    #note-display.sheet.hidden
      .title
      hr
      .body

  div
    #note-controls.sheet( style={ position: 'sticky', top: '4rem' } )
      form.edit.hidden( method='POST' )
        .grid.align-baseline.gap-2( style={ 'grid-template-columns': 'auto auto' } )
          label( for='note_title' ) Title:
          input( id='note_title' type='text' name='note_title' )

          label( for='note_public' ) Public:
          label.switch
            input( id='note_public' name='note_public' type='checkbox' )
            span.slider
        
        input.hidden( id='create' type='submit' value='Create' formaction=`${ADDR_PREFIX}/notes/create` )
        input.hidden( id='save' type='submit' value='Save' formaction=`` )
        
        input( id='note_body' type='hidden' name='note_body' )
        input( id='note_universe' type='hidden' name='note_universe' value=(universe && universe.shortname) )
        input( id='note_item' type='hidden' name='note_item' value=(item && item.shortname) )
        input( id='note_board' type='hidden' name='note_board' value=(board && board.shortname) )


  script.
    (async function() {
      if (!window.createElement) throw 'domUtils not loaded!';
      if (!window.createSearchableSelect) throw 'searchableSelect not loaded!';
      if (!window.modal) throw 'modal not loaded!';
      if (!window.getJSON) throw 'fetchUtils.js not loaded!';
      if (!window.setupEasyMDE) throw 'easyMDE.js not loaded!';
      if (!window.parseMarkdown) throw 'markdown/parse.js not loaded!';
      if (!window.loadMarkdown) throw 'markdown/render.js not loaded!';

      let noteState = 'list';
      const leftBtn = document.querySelector('#notes-left-btn');
      const noteList = document.querySelector('#note-list');
      const noteEdit = document.querySelector('#note-edit');
      const noteDisplay = document.querySelector('#note-display');

      const noteControls = document.querySelector('#note-controls');
      const editControls = noteControls.querySelector('.edit');

      const controlTabs = document.querySelector('#note-control-tabs');
      const editTab = controlTabs.querySelector('.edit');
      const previewTab = controlTabs.querySelector('.preview');

      const titleNodes = await loadMarkdown(noteDisplay.querySelector('.title'), '#{universe && universe.shortname}', '', null);
      async function updateTitle(markdown) {
        const data = await parseMarkdown(markdown).evaluate('#{universe && universe.shortname}', null, (tag) => {
          if (tag.type === 'p') tag.type = 'h1';
        });
        titleNodes.update(data);
        titleNodes.render();
      }
      const displayNodes = await loadMarkdown(noteDisplay.querySelector('.body'), '#{universe && universe.shortname}', '', null);
      async function updateDisplay(markdown) {
        const data = await parseMarkdown(markdown).evaluate('#{universe.shortname}', null);
        displayNodes.update(data);
        displayNodes.render();
      }
      editControls.note_title.addEventListener('change', () => {
        updateTitle(editControls.note_title.value);
      });
      const easyMDE = setupEasyMDE('#note-edit textarea', {universe, context: { item }});
      easyMDE.codemirror.on('change', () => {
        updateDisplay(easyMDE.value());
        editControls.note_body.value = easyMDE.value();
      });

      function showNoteEditControls() {
        noteList.classList.add('hidden');
        noteDisplay.classList.add('hidden');
        noteEdit.classList.remove('hidden');
        editControls.classList.remove('hidden');
        controlTabs.classList.remove('hidden');
        editTab.classList.add('selected');
        leftBtn.firstChild.innerText = 'Back to List';
      }
      function editNote() {
        noteState = 'edit';
        showNoteEditControls();
        editControls.create.classList.add('hidden');
        editControls.save.classList.remove('hidden');
      }
      function createNote() {
        noteState = 'new';
        showNoteEditControls();
        editControls.create.classList.remove('hidden');
        editControls.save.classList.add('hidden');
      }
      function backToList() {
        if (noteState === 'new' || noteState === 'edit-unsaved') {
          if (!confirm('You have unsaved changes! Are you sure you want to go back?')) return;
        }
        noteState = 'list';
        noteList.classList.remove('hidden');
        noteEdit.classList.add('hidden');
        editControls.classList.add('hidden');
        controlTabs.classList.add('hidden');
        editTab.classList.remove('selected');
        leftBtn.firstChild.innerText = 'Create Note';
      }

      leftBtn.addEventListener('click', () => {
        if (noteState === 'list') createNote();
        else backToList();
      });

      editTab.addEventListener('click', () => {
        controlTabs.querySelectorAll('li').forEach(el => el.classList.remove('selected'));
        editTab.classList.add('selected');
        noteDisplay.classList.add('hidden');
        noteEdit.classList.remove('hidden');
      });

      previewTab.addEventListener('click', () => {
        controlTabs.querySelectorAll('li').forEach(el => el.classList.remove('selected'));
        previewTab.classList.add('selected');
        noteDisplay.classList.remove('hidden');
        noteEdit.classList.add('hidden');
      });
        
      document.querySelectorAll('.note').forEach((el) => {
        loadMarkdown(el, '#{universe.shortname}', el.dataset.val, null);
      });
    })();
