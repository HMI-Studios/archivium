extends ../layout.pug
include ../mixins.pug

block breadcrumbs
  a.link.link-animated( href=`${ADDR_PREFIX}/` ) #{T('Home')}
  |  / 
  span #{T('Notifications')}

block scripts
  script.
    async function markNotification(isRead, id) {
      await putJSON(`/api/notifications/sent/${id}`, { isRead });
      window.location.reload();
    }
    async function markAllRead() {
      await putJSON(`/api/notifications/mark-all`);
      window.location.reload();
    }

block content
  script
    include /static/scripts/cardUtils.js
    include /static/scripts/listUtils.js
    include /static/scripts/fetchUtils.js

  .center
    h1 Notifications
    small
      i You can decide which things you will receive notifications for on the 
        a.link.link-animated( href=`${ADDR_PREFIX}/settings` ) settings
        |  page.
  hr
  .d-flex.align-center.gap-4.my-4
    p.ma-0
      i #{unread.length} unread notification(s)
    .grow-1
      .d-flex.align-center.pa-2.pb-0
        a.link( onclick='toggleNotifications()' )
          span#notification-bell.material-symbols-outlined.mr-1(
            style={ 'font-size': 'xx-large' }
            title='Loading...'
          ) notifications
        small#notification-text Loading...
      script.
        function updateBell(isSubscribed) {
          const bell = document.querySelector('#notification-bell');
          const text = document.querySelector('#notification-text');
          if (isSubscribed) {
            bell.classList.add('solid');
            bell.textContent = 'notifications_active';
            bell.title = 'Click to disable push notifications';
            text.textContent = 'Push Notifications On';
          } else {
            bell.classList.remove('solid');
            bell.textContent = 'notifications';
            bell.title = 'Click to enable push notifications';
            text.textContent = 'Push Notifications Off';
          }
        }
        function toggleNotifications() {
          setSubscribeStatus(updateBell);
        }
        checkSubscribed(updateBell);
    .navbarBtn
      a.navbarBtnLink.navbarText.ma-0( onclick='markAllRead()' ) Mark all as read

  #unread-notifications.d-flex.flex-col.gap-4
    each notification in unread
      .sheet.d-flex.gap-4.align-start
        img.userIcon( src=notification.icon_url || '/static/assets/icons/archivium-192.png' )
        .d-flex.flex-col.grow-1
          div
            if notification.click_url
              a.link.link-animated.mr-2( href=notification.click_url ) 
                b #{notification.title}
            else
              b #{notification.title} 
            small #{formatDate(notification.sent_at)}
          p #{notification.body}
        a.link.material-symbols-outlined( onclick=`markNotification(true, ${notification.id})` title='Mark as read' ) drafts

  .d-flex.align-center.gap-4.my-4
    p.ma-0
      i #{read.length} read notification(s)

  #read-notifications.d-flex.flex-col.gap-4
    each notification in read
      .sheet.d-flex.gap-4.align-start
        img.userIcon( src=notification.icon_url || '/static/assets/icons/archivium-192.png' )
        .d-flex.flex-col.grow-1
          div
            if notification.click_url
              a.link.link-animated.mr-2( href=notification.click_url ) 
                b #{notification.title}
            else
              b #{notification.title} 
            small #{formatDate(notification.sent_at)}
          p #{notification.body}
        a.link.material-symbols-outlined( onclick=`markNotification(false, ${notification.id})` title='Mark as unread' ) mark_email_unread
