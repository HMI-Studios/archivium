extends ../layout.pug

block styles
  link( rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css" )
  style.
    .tags-and-icons {
      display: grid;
      grid-template-columns: 2rem 1fr 2rem;
    }
    .tags-and-icons a {
      position: absolute;
    }

block scripts
  script( src="https://unpkg.com/easymde/dist/easymde.min.js" )
  script
    include /static/scripts/tabs.js
    include /static/scripts/domUtils.js
    include /static/scripts/fetchUtils.js
    include /static/scripts/markdown/parse.js
    include /static/scripts/markdown/render.js
    include /static/scripts/modal.js
    include /static/scripts/searchableSelect.js
    include /static/scripts/editor/markdown.js
    include /static/scripts/calendarPicker.js
    include /static/scripts/timelineRender.js
    include /static/scripts/cardUtils.js
    //- include /static/scripts/editor/rich.js

block breadcrumbs
  a.link.link-animated( href=`${ADDR_PREFIX}/` ) #{T('Home')}
  |  / 
  a.link.link-animated( href=`${ADDR_PREFIX}/universes` ) #{T('Universes')}
  |  / 
  a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}` ) #{universe.title}
  |  / 
  a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}/items` ) #{T('Items')}
  |  / 
  span #{item.title}

block content
  h1.center #{item.title}
  p.center #{capitalize(T(item.itemTypeName))} of 
    a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}` ) #{item.universe}
  p.center
    small Created by 
      a.link.link-animated( href=`${ADDR_PREFIX}/users/${item.author}` ) #{item.author}
      |  #{formatDate(new Date(item.created_at))}
      |  - Last updated #{formatDate(new Date(item.updated_at))}
  .tags-and-icons.my-4
    div
    .center#tags
      small
        if item.tags
          each tag in item.tags
            if tag
              | ##{tag} 
    #action-bar.d-flex.justify-end.align-end
      if contextUser && (universe.author_permissions[contextUser.id] >= perms.WRITE/* || item.author === contextUser.username*/)
        a.link.link-animated.d-flex.align-end( href=`${ADDR_PREFIX}/universes/${universe.shortname}/items/${item.shortname}/edit` )
          span.material-symbols-outlined edit
          |  Edit
          
  hr

  //- Tab buttons
  ul#tabBtns.navbarBtns.gap-1.mb-2
    if 'body' in item.obj_data
      li.navbarBtn#bodyBtn( data-tab='body' )
        h3.navbarBtnLink.navbarText.ma-0( onclick=`showTab('body')` ) Main Text
    if 'tabs' in item.obj_data
      each tab, name in item.obj_data.tabs
        li.navbarBtn( data-tab=name )
          h3.navbarBtnLink.navbarText.ma-0( onclick=`showTab('${name}')` ) #{name}
    each dataType in ['timeline', 'gallery', 'lineage']
      if dataType in item.obj_data && 'title' in item.obj_data[dataType]
        li.navbarBtn( data-tab=dataType )
          h3.navbarBtnLink.navbarText.ma-0( onclick=`showTab('${dataType}')` ) #{item.obj_data[dataType].title}
    if item.obj_data.comments
      li.navbarBtn( data-tab='comments' )
        h3.navbarBtnLink.navbarText.ma-0( onclick=`showTab('comments')` ) #{capitalize(T('comments'))}
    if item.obj_data.notes
      li.navbarBtn( data-tab='notes' )
          h3.navbarBtnLink.navbarText.ma-0( onclick=`showTab('notes')` ) #{capitalize(T('notes'))}

  
  script!= `window.item = ${JSON.stringify(item)};`

  .tabs
    if 'tabs' in item.obj_data
      each tab, name in item.obj_data.tabs
        .itemTab.hidden( data-tab=name )
          each val, key in tab
            .itemKey
              span #{key}
              hr
              .mdVal( data-val=val )

    if 'timeline' in item.obj_data && 'title' in item.obj_data.timeline
      .itemTab.hidden( data-tab='timeline' )
      script.
        const timelineTab = document.querySelector('.itemTab[data-tab=timeline]');
        if (timelineTab) {
          renderTimeline(timelineTab, item, item.events);
        };

    if 'gallery' in item.obj_data && 'title' in item.obj_data.gallery
      .itemTab.hidden.gallery( data-tab='gallery' )
        each img in item.gallery || []
          .itemKey
            img( src=`/api/universes/${universe.shortname}/items/${item.shortname}/gallery/images/${img.id}`, title=img.name, alt=img.label )
            if img.label
              .mdLabel( data-val=img.label )

    if 'lineage' in item.obj_data && 'title' in item.obj_data.lineage
      .itemTab.hidden( data-tab='lineage' )
        each parent in item.parents
          .itemKey
            span #{parent.parent_label || T('Parent')}
            hr
            a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}/items/${parent.parent_shortname}` )
              | #{parent.parent_title}
        each child in item.children
          .itemKey
            span #{child.child_label || T('Child')}
            hr
            a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}/items/${child.child_shortname}` )
              | #{child.child_title}
        
    if item.obj_data.comments
      .hidden( data-tab='comments' )
        include ../components/comments.pug
        
    if item.obj_data.notes
      .hidden( data-tab='notes' )
        include ../components/notes.pug

    if 'body' in item.obj_data
      .sheet.hidden( data-tab='body' )
        #markdown-body

  script.
    (function() {
      const body = document.getElementById('markdown-body');
      if (body) {
        loadMarkdown(body, '#{universe.shortname}', item.obj_data.body, { item });
      };

      document.querySelectorAll('.mdVal').forEach((el) => {
        loadMarkdown(el, '#{universe.shortname}', el.dataset.val, null, (tag) => {
          if (tag.type === 'div') tag.attrs.style = {'text-align': 'right'};
          if (tag.type === 'p') tag.type = 'span';
        });
      });

      document.querySelectorAll('.mdLabel').forEach((el) => {
        loadMarkdown(el, '#{universe.shortname}', el.dataset.val, null, (tag) => {
          if (tag.type === 'div') {
            tag.attrs.style = {'text-align': 'center'};
            tag.attrs.class += ' label';
          }
          if (tag.type === 'p') tag.type = 'span';
        });
      });
      
      document.querySelectorAll('.comment').forEach((el) => {
        console.log(el.dataset.val)
        loadMarkdown(el, '#{universe.shortname}', el.dataset.val, null);
      });

      const galleryModalState = {}
      const galleryItems = document.querySelectorAll('.gallery .itemKey');
      galleryItems.forEach((itemKey, i) => {
        galleryModalState[i] = false;
        const img = itemKey.querySelector('img');

        img.onclick = (e) => {
          e.stopPropagation();
          if (!galleryModalState[i]) {
            itemKey.classList.add('modal');
            console.log(itemKey)
            galleryModalState[i] = true;
          }
        };

        itemKey.onclick = () => {
          if (galleryModalState[i]) {
            itemKey.classList.remove('modal');
            galleryModalState[i] = false;
          }
        };
      });
    })();
