extends ../layout.pug

block scripts
  script
    include /static/scripts/tabs.js
    include /static/scripts/fetchUtils.js
    include /static/scripts/markdown/parse.js
    include /static/scripts/markdown/render.js
    include /static/scripts/domUtils.js
    include /static/scripts/searchableSelect.js
    include /static/scripts/editor/markdown.js
    include /static/scripts/timelineRender.js
    //- include /static/scripts/editor/rich.js

block append save
  li#save-btn.navbarBtn.hidden
    a.navbarBtnLink.navbarText Save

block breadcrumbs
  a.link.link-animated( href=`${ADDR_PREFIX}/` ) #{T('Home')}
  |  / 
  a.link.link-animated( href=`${ADDR_PREFIX}/universes` ) #{T('Universes')}
  |  / 
  a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}` ) #{universe.title}
  |  / 
  a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}/items` ) #{T('Items')}
  |  / 
  span #{item.title}

block content
  h1.center #{item.title}
  p.center #{capitalize(T(item.itemTypeName))} of 
    a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}` ) #{item.universe}
    if contextUser && (universe.author_permissions[contextUser.id] >= perms.WRITE/* || item.author === contextUser.username*/)
      |  - 
      a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}/items/${item.shortname}/edit` ) Edit
  p.center
    small Created by 
      a.link.link-animated( href=`${ADDR_PREFIX}/users/${item.author}` ) #{item.author}
      |  #{formatDate(new Date(item.created_at))}
      |  - Last updated #{formatDate(new Date(item.updated_at))}
  p.center
    small
      if item.tags
        each tag in item.tags
          if tag
            | ##{tag} 
  hr

  //- Tab buttons
  ul.navbarBtns#tabBtns.gap-1
    if 'body' in item.obj_data
      li.navbarBtn#bodyBtn( data-tab='body' )
        h3.navbarBtnLink.navbarText( onclick=`showTab('body')` ) Main Text
    if 'tabs' in item.obj_data
      each tab, name in item.obj_data.tabs
        li.navbarBtn( data-tab=name )
          h3.navbarBtnLink.navbarText( onclick=`showTab('${name}')` ) #{name}
    if 'chronology' in item.obj_data && 'title' in item.obj_data.chronology
      li.navbarBtn( data-tab='chronology' )
          h3.navbarBtnLink.navbarText( onclick=`showTab('chronology')` ) #{item.obj_data.chronology.title}
    if 'gallery' in item.obj_data && 'title' in item.obj_data.gallery
      li.navbarBtn( data-tab='gallery' )
          h3.navbarBtnLink.navbarText( onclick=`showTab('gallery')` ) #{item.obj_data.gallery.title}
    if 'lineage' in item.obj_data && 'title' in item.obj_data.lineage
      li.navbarBtn( data-tab='lineage' )
          h3.navbarBtnLink.navbarText( onclick=`showTab('lineage')` ) #{item.obj_data.lineage.title}

  
  script!= `window.item = ${JSON.stringify(item)};`

  .tabs
    if 'tabs' in item.obj_data
      each tab, name in item.obj_data.tabs
        .itemTab.hidden( data-tab=name )
          each val, key in tab
            .itemKey
              if contextUser && (universe.author_permissions[contextUser.id] >= perms.WRITE)
                .editableKey( data-key=key data-tab-name=name data-val=val )
              else
                span #{key}
                hr
                .mdVal( data-val=val )

    if 'chronology' in item.obj_data && 'title' in item.obj_data.chronology
      .itemTab.hidden( data-tab='chronology' )
      script.
        const timelineTab = document.querySelector('.itemTab[data-tab=chronology]');
        if (timelineTab) {
          renderTimeline(timelineTab, item, item.events);
        };

    if 'gallery' in item.obj_data && 'title' in item.obj_data.gallery
      .itemTab.hidden.gallery( data-tab='gallery' )
        each img, index in item.obj_data.gallery.imgs || []
          .itemKey
            img( src=img.url, alt=img.label )
            if contextUser && (universe.author_permissions[contextUser.id] >= perms.WRITE)
              .editableLabel.label( data-index=index data-label=img.label )
            else
              if img.label
                .mdLabel( data-val=img.label )

    if 'lineage' in item.obj_data && 'title' in item.obj_data.lineage
      .itemTab.hidden( data-tab='lineage' )
        each title, shortname in item.parents
          .itemKey
            span #{title[0] || T('Parent')}
            hr
            a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}/items/${shortname}` )
              | #{item.parent_titles[shortname]}
        each title, shortname in item.children
          .itemKey
            span #{title[0] || T('Child')}
            hr
            a.link.link-animated( href=`${ADDR_PREFIX}/universes/${universe.shortname}/items/${shortname}` )
              | #{item.child_titles[shortname]}

    if 'body' in item.obj_data
      .sheet.hidden( data-tab='body' )
        if contextUser && (universe.author_permissions[contextUser.id] >= perms.WRITE)
          #editor
        else
          #markdown-body
          //- script!= `loadMarkdown(${JSON.stringify(universe.shortname)}, ${JSON.stringify(item.obj_data.body)}, ${JSON.stringify({ item })});`

  script.
    const body = document.getElementById('markdown-body');
    if (body) {
      loadMarkdown(body, '#{universe.shortname}', item.obj_data.body, { item });

      document.querySelectorAll('.mdVal').forEach((el) => {
        loadMarkdown(el, '#{universe.shortname}', el.dataset.val, null, (tag) => {
          if (tag.type === 'div') tag.attrs.style = {'text-align': 'right'};
          if (tag.type === 'p') tag.type = 'span';
        });
      });

      document.querySelectorAll('.mdLabel').forEach((el) => {
        loadMarkdown(el, '#{universe.shortname}', el.dataset.val, null, (tag) => {
          if (tag.type === 'div') {
            tag.attrs.style = {'text-align': 'center'};
            tag.attrs.class += ' label';
          }
          if (tag.type === 'p') tag.type = 'span';
        });
      });
    };
  
  if contextUser && (universe.author_permissions[contextUser.id] >= perms.WRITE)
    script!= `loadEditor(${JSON.stringify(universe)}, ${JSON.stringify(item.obj_data.body)});`
    //- script!= `loadRichEditor(${JSON.stringify(universe)}, ${JSON.stringify(item.obj_data.body)});`

  script.
    (function() {
      const galleryModalState = {}
      const galleryItems = document.querySelectorAll('.gallery .itemKey');
      galleryItems.forEach((itemKey, i) => {
        galleryModalState[i] = false;
        const img = itemKey.querySelector('img');

        img.onclick = (e) => {
          e.stopPropagation();
          if (!galleryModalState[i]) {
            itemKey.classList.add('modal');
            console.log(itemKey)
            galleryModalState[i] = true;
          }
        };

        itemKey.onclick = () => {
          if (galleryModalState[i]) {
            itemKey.classList.remove('modal');
            galleryModalState[i] = false;
          }
        };
      });
    })();
