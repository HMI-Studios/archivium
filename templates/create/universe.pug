extends ../layout.pug

block title
  title #{T('New Universe â€” Archivium')}

block breadcrumbs
  a.link.link-animated(href=`${ADDR_PREFIX}/`) #{T('Home')}
  |  / 
  a.link.link-animated(href=`${ADDR_PREFIX}/universes`) #{T('Universes')}
  |  / 
  span #{T('New')}

block scripts
  script.
    function toShortname(title) {
      let shortname = title.toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');

      if (shortname.length < 3) {
          return '';
      } else if (shortname.length > 64) {
          shortname = shortname.substring(0, 64);
      }

      return shortname;
    }
    window.addEventListener('load', () => {
      const titleInput = document.querySelector('#title');
      const shortnameInput = document.querySelector('#shortname');
      let hasEditedShortname = false;

      titleInput.addEventListener('input', () => {
        if (!hasEditedShortname) {
          shortnameInput.value = toShortname(titleInput.value);
        }
      });
      shortnameInput.addEventListener('input', () => {
        hasEditedShortname = true;
      });
    });

block content
  script
    include /static/scripts/universes.js

  h2 #{T('New Universe')}
  form(method='POST')
    div.inputGroup
      label(for='title') #{T('Title')}: 
      input(id='title' type='text' name='title' value=`${title || ''}`)
    div.inputGroup
      label(for='shortname') #{T('Shortname')}: 
      input(id='shortname' type='text' name='shortname' value=`${shortname || ''}`)
    div.inputGroup
      label(for='visibility') #{T('Visibility')}: 
      select(id='visibility' name='visibility')
        option(value='public' selected=(visibility === 'public')) #{T('Public')}
        option(value='private' selected=(visibility === 'private')) #{T('Private')}
    div.inputGroup
      label(for='discussion_enabled') #{T('Discussion')}: 
      select(id='discussion_enabled' name='discussion_enabled')
        option(value='enabled' selected=(discussion_enabled === 'enabled')) #{T('Enabled')}
        option(value='disabled' selected=(discussion_enabled === 'disabled')) #{T('Disabled')}
    div.inputGroup
      label(for='discussion_open') #{T('Who can comment')}: 
      select(id='discussion_open' name='discussion_open')
        option(value='enabled' selected=(discussion_open)) #{T('Anyone')}
        option(value='disabled' selected=(!discussion_open)) #{T('Only with COMMENT permission level')}
    div
      input(type='hidden' id='obj_data' name='obj_data' value='{}')
      button(type='submit') #{T('Create Universe')}
    if error
      div
        span(style={'font-size': 'small'}).color-error= error
  
  script.
    setDefaultCats();
