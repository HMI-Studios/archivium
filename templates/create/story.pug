extends ../layout.pug

block title
  title #{T('New Story')} â€” #{T('Archivium')}

block breadcrumbs
  a.link.link-animated( href=`${ADDR_PREFIX}/` ) #{T('Home')}
  |  / 
  a.link.link-animated( href=`${ADDR_PREFIX}/stories` ) #{T('Stories')}
  |  / 
  span #{T('New')}

block scripts
  script
    include /static/scripts/shortname.js
  script.
    window.addEventListener('load', () => {
      const titleInput = document.querySelector('#title');
      const shortnameInput = document.querySelector('#shortname');
      let hasEditedShortname = false;

      titleInput.addEventListener('input', () => {
        if (!hasEditedShortname) {
          shortnameInput.value = toShortname(titleInput.value);
        }
      });
      shortnameInput.addEventListener('input', () => {
        hasEditedShortname = true;
      });
    });

block content
  script
    include /static/scripts/domUtils.js
    include /static/scripts/searchableSelect.js

  h2 #{T('New Story')}
  form(method='POST')
    div.inputGroup
      label(for='title') #{T('Title')}: 
      input(id='title' type='text' name='title' value=`${title || ''}`)
    div.inputGroup
      label(for='shortname') #{T('Shortname')}: 
      input(id='shortname' type='text' name='shortname' value=`${shortname || ''}`)
    div.inputGroup
      label(for='universe') #{T('Universe')}: 
      #universes-select
      script.
        universes = !{JSON.stringify(universes)};
        document.querySelector('#universes-select').replaceWith(createSearchableSelect(
          'universe',
          universes.reduce((acc, universe) => ({ ...acc, [universe.shortname]: universe.title }), {}),
          //- (value) => {
          //-   console.log(value)
          //- },
        ));
    div.inputGroup
      label(for='visibility' ) #{T('Visibility')}: 
      select(id='visibility' name='visibility' )
        option(value=visibilityModes.PUBLIC selected=(visibility === visibilityModes.PUBLIC)) #{T('Visible to everyone')}
        option(value=visibilityModes.UNIVERSE selected=(visibility === visibilityModes.UNIVERSE)) #{T('Visible to universe authors')}
        option(value=visibilityModes.PIRVATE selected=(visibility === visibilityModes.PIRVATE)) #{T('Visible only to you')}
    div
      button(type='submit') #{T('Create Universe')}
    if error
      div
        span(style={'font-size': 'small'}).color-error= error
