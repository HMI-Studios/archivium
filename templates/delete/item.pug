extends ../layout.pug

block content
  script!= `const itemShortname = '${item.shortname}'`
  script.
    async function deleteItem() {
      const shortname = document.getElementById('shortname').value;
      if (shortname !== itemShortname) {
        const errSpan = document.getElementById('error');
        errSpan.innerText = 'Shortnames do not match!';
        return;
      };
      const response = await fetch(`/api/universes/#{item.universe_short}/items/${itemShortname}`, { method: 'DELETE' })
      if (response.ok) {
        window.location.reload();
      } else {
        const errSpan = document.getElementById('error');
        errSpan.innerText = await response.json();
      }
    }

  h2 #{T('Delete %s', item.title)}
  .d-flex.flex-col

    .big-text
      p #{T('Are you want to delete %s? This action is ', item.title)}
        b #{T('permanent')}
        |  #{T('and')} 
        b.color-error #{T(' cannot be undone!')}

      ul
        li #{T('All images uploaded to %s will be deleted.', item.title)}
        li #{T('All comments on %s will be deleted.', item.title)}
        li #{T('Notes pinned to %s will ', item.title)}
          i #{T('not')}
          |  #{T('be deleted, but will be unpinned.')}

      p #{T('If you are ')}
        b #{T('absolutely sure')}
        | #{T(' you want to delete %s, please type in its shortname', item.title)} (
        code #{item.shortname}
        | ) #{T('below')}.

    div.inputGroup
      label(for='title') #{T('Item shortname')}: 
      input(id='shortname' type='text' name='shortname')
    
    .d-flex.align-center.gap-2
      button(onclick='deleteItem()') #{T('Delete Item')}
      a.link.link-animated(href=`${universeLink(item.universe_short)}/items/${item.shortname}`) #{T('Go Back')}

    div
      span#error(style={ color: 'red', 'font-size': 'small' })
