extends ../layout.pug

block scripts
  script
    include /static/scripts/fetchUtils.js
  script.
    const formatDate = !{formatDate};
    const validateUsername = !{validateUsername};

block content
  h1.center Settings
  h3 Change Username
  form#changeUsername
    .inputGroup
      label( for='username' ) Username:
      input( id='username' name='username' type='text' value=user.username )
      small.row-2.col-2 You can only change your username once every 30 days, so choose carefully!
      .d-flex
        button( type='submit' ) Change Username

    small.color-error.hidden#username-error

    script.
      (() => {
        const form = document.forms.changeUsername;
        const formError = document.querySelector('#username-error');
        form.username.addEventListener('input', () => {
          formError.classList.add('hidden');
          const value = form.username.value;
          const error = validateUsername(value);
          if (error) {
            formError.innerText = error;
            formError.classList.remove('hidden');
          }
        });
        form.addEventListener('submit', async (e) => {
          formError.classList.add('hidden');
          e.preventDefault();

          const value = form.username.value;
          if (value === '#{user.username}') return;

          const error = validateUsername(value);
          if (error) {
            formError.innerText = error;
            formError.classList.remove('hidden');
            return;
          }

          const [response, data] = await putJSON(`/api/users/#{user.username}/username`, { username: value });
          if (response.status === 429) {
            formError.innerText = `You have changed your username too recently. Try again ${formatDate(new Date(data))}.`;
            formError.classList.remove('hidden');
          } else if (response.status === 200) {
            window.location.reload();
          } else {
            console.log(data)
            formError.innerText = data;
            formError.classList.remove('hidden');
          }
        });
      })();

  hr.w-100.mb-0

  h3 Notifications
  button#enable-notifications( disabled ) Enable Notifications
  script.
    (() => {
      const publicVapidKey = 'BOf0VGyqgEzvlGkc2rHYUDw7D9fbJYHn6H4YWIWY6nb0KheDYZaIUUqTOFNha8FgE5SsO-dpHbkhyOGukiqkwcQ';
      
      async function checkRegisterServiceWorker() {
        if ('serviceWorker' in navigator) {
          try {
            const registration = await navigator.serviceWorker.getRegistration();

            if (registration) {
              console.log('Existing Service Worker found.');
              return registration;
            }

            const newRegistration = await navigator.serviceWorker.register('/notifworker.js');
            console.log('New Service Worker registered.');

            return newRegistration;

          } catch (error) {
            console.error('Service Worker registration failed:', error);
          }
        }
      }

      //- async function checkSubscribed() {
      //-   const register = await checkRegisterServiceWorker();
      //-   const existingSubscription = await serviceWorkerReady.pushManager.getSubscription();  
      //- }

      async function subscribeUser() {
        try {
          const register = await checkRegisterServiceWorker();
          const serviceWorkerReady = await navigator.serviceWorker.ready;

          const existingSubscription = await serviceWorkerReady.pushManager.getSubscription();  
          console.log(existingSubscription ? 'Resubmitting old subscription...' : 'Creating new subscription...')
          
          // if (!existingSubscription) {
          //   const enableNotifs = confirm('Allow notifications?');
          //   if (!enableNotifs) return;
          // }

          const subscription = existingSubscription || await register.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: urlBase64ToUint8Array(publicVapidKey),
          });

          await fetch('#{ADDR_PREFIX}/api/subscribe', {
            method: 'POST',
            body: JSON.stringify(subscription),
            headers: { 'Content-Type': 'application/json' },
          });

          console.log('User subscribed!');
        } catch (err) {
          alert(err);
        }
      }

      // Convert base64 VAPID key to Uint8Array
      function urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - (base64String.length % 4)) % 4);
        const base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');
        const rawData = atob(base64);
        return new Uint8Array([...rawData].map(char => char.charCodeAt(0)));
      }

      const enableNotifsBtn = document.querySelector('#enable-notifications');
      function allowSubscribing() {
        enableNotifsBtn.addEventListener('click', () => {
          subscribeUser().catch(console.error);
        });
        enableNotifsBtn.disabled = false;
      }

      if ('serviceWorker' in navigator && 'PushManager' in window) {
        allowSubscribing();
      } else {
        if (Notification.permission === "granted") {
          allowSubscribing();
        } else if (Notification.permission !== "denied") {
          Notification.requestPermission().then(permission => {
            if (permission === "granted") {
              allowSubscribing();
            }
          });
        }
      }
    })();
