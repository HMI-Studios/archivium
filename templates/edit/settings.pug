extends ../layout.pug

block scripts
  script
    include /static/scripts/fetchUtils.js
  script.
    const formatDate = !{formatDate};
    const validateUsername = !{validateUsername};

block content
  h1.center Settings
  h2 Account
  h3 Change Username
  form#changeUsername
    .inputGroup
      label( for='username' ) Username:
      input( id='username' name='username' type='text' value=user.username )
      small.row-2.col-2 You can only change your username once every 30 days, so choose carefully!
      .d-flex
        button( type='submit' ) Change Username

    small.color-error.hidden#username-error

    script.
      (() => {
        const form = document.forms.changeUsername;
        const formError = document.querySelector('#username-error');
        form.username.addEventListener('input', () => {
          formError.classList.add('hidden');
          const value = form.username.value;
          const error = validateUsername(value);
          if (error) {
            formError.innerText = error;
            formError.classList.remove('hidden');
          }
        });
        form.addEventListener('submit', async (e) => {
          formError.classList.add('hidden');
          e.preventDefault();

          const value = form.username.value;
          if (value === '#{user.username}') return;

          const error = validateUsername(value);
          if (error) {
            formError.innerText = error;
            formError.classList.remove('hidden');
            return;
          }

          const [response, data] = await putJSON(`/api/users/#{user.username}/username`, { username: value });
          if (response.status === 429) {
            formError.innerText = `You have changed your username too recently. Try again ${formatDate(new Date(data))}.`;
            formError.classList.remove('hidden');
          } else if (response.status === 200) {
            window.location.reload();
          } else {
            console.log(data)
            formError.innerText = data;
            formError.classList.remove('hidden');
          }
        });
      })();

  hr.w-100.mb-0

  h2 Notifications
  .inputGroup
    label( for='push_notifs' ) #{T('Push notifications')}: 
    label.switch
      input( id='push_notifs' name='push_notifs' type='checkbox' checked=false )
      span.slider
    script.
      const checkbox = document.querySelector('#push_notifs');
      function updateCheckbox(isSubscribed) {
        checkbox.checked = isSubscribed;
      }
      checkbox.addEventListener('change', () => {
        console.log(checkbox.checked);
        setSubscribeStatus(updateCheckbox, checkbox.checked);
      });
      checkSubscribed(updateCheckbox);
  form#notificationSettings
    .inputGroup
      label( for='email_notifs' ) #{T('Email notifications')}: 
      label.switch
        input( id='email_notifs' name='email_notifs' type='checkbox' checked=user.email_notifications )
        span.slider

    h3 Filter Notifications
    table.sheet
      thead
        tr
          th #{T('Notfication Type')}
          each _, method_key in notificationMethods
            th #{T(capitalize(method_key.toLowerCase()))}
      tbody
        each type in notificationTypes
          tr
            td #{T(`notif_${type}`)}
            each method in notificationMethods
              td.center
                input( id=`notif_${type}_${method}` name=`notif_${type}_${method}` type='checkbox' checked=false )
