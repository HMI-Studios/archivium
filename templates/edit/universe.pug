extends ../layout.pug

block append styles
  style.
    #cats td {
      padding: 0.125rem 0;
    }

    #cats td input {
      border-radius: 0;
      border: none;
      width: 100%;
    }

block append save
  li#save-btn.navbarBtn
    script.
    a.navbarBtnLink.navbarText( onclick='document.forms.edit.submit()' ) Save Changes

block content
  script
    include /static/scripts/domUtils.js
    include /static/scripts/universes.js

  h2 Edit #{universe.title}
  form#edit( method='POST' )

    div.inputGroup
      label( for='title' ) Title: 
      input( id='title' type='text' name='title' value=universe.title )

    div.inputGroup
      label( for='visibility' ) Visibility: 
      select( id='visibility' name='visibility' )
        option( value='public' selected=(universe.public) ) Public
        option( value='private' selected=(!universe.public) ) Private

    div.inputGroup
      label( for='discussion_enabled' ) Discussion: 
      select( id='discussion_enabled' name='discussion_enabled' )
        option( value='enabled' selected=(universe.discussion_enabled) ) Enabled
        option( value='disabled' selected=(!universe.discussion_enabled) ) Disabled

    div.inputGroup
      label( for='discussion_open' ) Who can comment: 
      select( id='discussion_open' name='discussion_open' )
        option( value='enabled' selected=(universe.discussion_open) ) Anyone
        option( value='disabled' selected=(!universe.discussion_open) ) Only with COMMENT permission level

    h3 Item Types
    small
      b Note: 
      | be aware that removing or renaming
    table
      thead
        tr
          th Shortname
          th Singular Type Name
          th Plural Type Name
          th Color
          th
        tr
          td
          td.center
            small (e.g. "This is an 
              b item
              |  of #{universe.title}")
          td.center
            small (e.g. "These are 
              b items
              |  of #{universe.title}")
          td
          td
      tbody#cats

    .d-flex.gap-2.mt-2
      button( type='button' onclick='addCat()' ) Add Type
      button( type='button' onclick='resetCats()' ) Reset to default types

    div
      input( id='obj_data' type='hidden' name='obj_data' value='{}' )

    if error
      div
        span( style={color: 'red', 'font-size': 'small'} )= error

  script!= `updateObjData(${JSON.stringify(universe.obj_data)});`
  script.
    function toShortname(title) {
      let shortname = title.toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');

      if (shortname.length > 64) {
          shortname = shortname.substring(0, 64);
      }

      return shortname;
    }

    function toPlural(title) {
      // This function is very hacky and only works in english (and only sometimes), but it'll be good enough for most cases for now.
      return `${title}s`;
    }

    const catList = [];
    for (const catShortname in obj_data.cats) {
      catList.push([catShortname, ...obj_data.cats[catShortname]]);
    }

    function updateCats() {
      const catsTable = document.getElementById('cats');
      catsTable.innerHTML = '';
      for (let i = 0; i < catList.length; i++) {
        const [catShortname, catTitle, catTitlePl, catColor] = catList[i];

        const titlePlInput = createElement('input', { attrs: { value: catTitlePl } });
        titlePlInput.addEventListener('input', () => {
          titlePlInput.value = titlePlInput.value.toLowerCase();
          catList[i][2] = titlePlInput.value;
        });

        const titleInput = createElement('input', { attrs: { value: catTitle } });
        titleInput.addEventListener('input', () => {
          titleInput.value = titleInput.value.toLowerCase();
          if (toPlural(catList[i][1]) === titlePlInput.value || !titlePlInput.value) {
            titlePlInput.value = toPlural(titleInput.value);
          }
          catList[i][1] = titleInput.value;
        });
        titleInput.addEventListener('change', () => {
          if (!catList[i][0]) {
            catList[i][0] = toShortname(titleInput.value);
            updateCats();
          }
        });

        const colorInput = createElement('input', { attrs: { id: `color${i}`, value: catColor, type: 'color', style: 'padding: 0; min-width: 3rem;' } });
        colorInput.addEventListener('input', () => catList[i][3] = colorInput.value);

        const catRow = createElement('tr', { children: [
          createElement('td', { attrs: { innerText: catShortname } }),
          createElement('td', { children: [titleInput] }),
          createElement('td', { children: [titlePlInput] }),
          createElement('td', { children: [createElement('div', { classList: ['d-flex'], children: [colorInput] })] }),
          createElement('td', { children: [createElement('button', { attrs: {
            innerText: T('Remove'),
            onclick: (e) => {
              e.preventDefault();
              catList.splice(i, 1);
              updateCats();
            },
          } })] }),
        ] });
        catsTable.appendChild(catRow);
      }
    }

    function addCat() {
      catList.push(['', '', '', '#ffffff']);
      updateCats();
    }

    function resetCats() {
      setDefaultCats();
      updateCats();
    }

    if (!('cats' in obj_data)) setDefaultCats();
    updateCats();

    const form = document.getElementById('edit');
    form.addEventListener('submit', () => {

    });
